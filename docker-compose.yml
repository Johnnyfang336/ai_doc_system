version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: ai_doc_postgres
    environment:
      POSTGRES_DB: ai_doc_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ai_doc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_doc_backend
    environment:
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-password123}@postgres:5432/ai_doc_system?sslmode=disable
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password123}
      - DB_NAME=ai_doc_system
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - PORT=8080
      - GIN_MODE=release
    volumes:
      - backend_storage:/home/appuser/storage
    ports:
      - "8080:8080"
    networks:
      - ai_doc_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_doc_frontend
    ports:
      - "80:80"
    networks:
      - ai_doc_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OnlyOffice Document Server
  onlyoffice:
    image: onlyoffice/documentserver:latest
    container_name: ai_doc_onlyoffice
    environment:
      - JWT_ENABLED=false
      - JWT_SECRET=${ONLYOFFICE_JWT_SECRET:-your-onlyoffice-jwt-secret}
      - WOPI_ENABLED=false
      - USE_UNAUTHORIZED_STORAGE=true
      - ALLOW_PRIVATE_IP_ADDRESS=true
      - ALLOW_META_IP_ADDRESS=true
    ports:
      - "8081:80"
    volumes:
      - onlyoffice_data:/var/www/onlyoffice/Data
      - onlyoffice_log:/var/log/onlyoffice
      - onlyoffice_cache:/var/lib/onlyoffice
    networks:
      - ai_doc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production environment)
  nginx:
    image: nginx:alpine
    container_name: ai_doc_nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - ai_doc_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  backend_storage:
    driver: local
  onlyoffice_data:
    driver: local
  onlyoffice_log:
    driver: local
  onlyoffice_cache:
    driver: local

networks:
  ai_doc_network:
    driver: bridge